{"version":3,"sources":["component/NavBar.js","component/Header.js","component/Wrapper.js","component/Card.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","score","topScore","status","Row","className","Col","href","Header","Jumbotron","fluid","Container","Wrapper","props","children","CardTemp","name","clickEvent","image","clicked","Card","style","width","height","Img","variant","onClick","alt","src","data-click","Body","Title","App","handleClickChoice","id","state","data","dataNew","map","entry","click","setState","prevState","reset","shuffle","dataPassed","obj","checkTopScore","recData","cb","length","randoIndex","Math","floor","random","push","splice","Characters","this","Char","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba6c3a3b.chunk.js","sourcesContent":["import React from 'react';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst NavBar = ({ score, topScore, status }) => {\r\n\r\n    return (\r\n        <Row className=\"nav-bar\">\r\n\r\n            <Col className=\"title\">\r\n                <a href=\"/\">Clicky Game</a>\r\n            </Col>\r\n\r\n            <Col>\r\n                {status || \"Click on any character to start\"}\r\n            </Col>\r\n\r\n            <Col>\r\n                Score: {score || 0} | Top Score: {topScore || 0}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <Jumbotron fluid>\r\n            <Container>\r\n                <h1>Clicky Game!</h1>\r\n                <br />\r\n                <p>Click on an image to earn points</p>\r\n                <p>don't click on any more than once!</p>\r\n            </Container>\r\n        </Jumbotron>\r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Wrapper = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper","import React from \"react\";\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nconst CardTemp = ({ name, clickEvent, image, clicked }) => {\r\n    return (\r\n        <Card style={{ width: '10rem', height: '15rem' }}>\r\n            <Card.Img\r\n                variant=\"top\"\r\n                onClick={clickEvent}\r\n                alt={name}\r\n                src={image}\r\n                data-click={clicked} />\r\n            <Card.Body>\r\n                <Card.Title>{name}</Card.Title>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nexport default CardTemp;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from './component/NavBar';\nimport Header from './component/Header';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Wrapper from './component/Wrapper';\nimport Card from \"./component/Card\"\nimport Characters from \"./characters.json\"\nimport \"./App.css\"\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            data: Characters,\n            score: 0,\n            topScore: 0,\n            status: \"\"\n        }\n    }\n    componentDidMount() {\n        let { score, topScore } = this.state;\n        if (score > topScore) {\n            this.setState(() => ({\n                topScore: score\n            }))\n        }\n    }\n    componentDidUpdate() {\n        if (this.state.score === 12) {\n            this.reset({ status: \"Click on any character to start\" })\n        }\n    }\n\n    handleClickChoice = (id) => {\n        let { data, score, topScore } = this.state;\n        let dataNew = data.map((entry) => {\n            if (entry.id === id && entry.click === false) {\n                entry.click = true;\n                this.setState((prevState) => {\n                    if (topScore === 11) {\n                        return ({\n                            score: prevState.score + 1,\n                            topScore: 12,\n                            status: \"You win!!!\"\n                        })\n                    } else if (score + 1 > topScore) {\n                        return ({\n                            score: prevState.score + 1,\n                            topScore: prevState.score + 1,\n                            status: \"You have guessed Correctly!\"\n                        })\n                    } else {\n                        return ({\n                            score: prevState.score + 1,\n                            status: \"You have guessed Correctly!\"\n                        })\n                    }\n                })\n            } else if (entry.id === id && entry.click === true) {\n                this.reset({ status: \"You already picked this character. Try Again.\" })\n            }\n            return entry\n        })\n        this.shuffle(dataNew,(dataPassed)=>{\n            this.setState({ data: dataPassed })\n        })\n    }\n\n    reset = (obj) => {\n        let dataNew = this.state.data.map((entry) => {\n            entry.click = false\n            return entry\n        });\n        this.setState({\n            data: dataNew,\n            score: 0,\n            status: obj.status\n        })\n    }\n\n    checkTopScore = () => {\n        let { score, topScore } = this.state\n        if (score > topScore) {\n            this.setState({\n                topScore: score\n            })\n        }\n    }\n\n    shuffle = (recData, cb) => {\n        let data = recData\n        let dataNew = [];\n        while (12 !== dataNew.length) {\n            let randoIndex = Math.floor(Math.random() * data.length)\n            dataNew.push(data[randoIndex])\n            data.splice(randoIndex, 1)\n        }\n        cb(dataNew)\n\n\n    }\n\n\n    render() {\n        return (\n            <Container fluid>\n                <NavBar score={this.state.score} topScore={this.state.topScore} status={this.state.status} />\n\n\n                <Row className=\"row-jumbotron\">\n                    <Header />\n                </Row>\n\n                <Wrapper >\n                    {this.state.data.map((Char) => {\n                        return <Card\n                            key={Char.id}\n                            name={Char.name}\n                            image={Char.image}\n                            clicked={Char.click}\n                            clickEvent={() => {\n                                this.handleClickChoice(Char.id)\n                            }}\n                        />\n\n                    })}\n                </Wrapper>\n\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}